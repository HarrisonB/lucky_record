class LuckyRecord::Model
  include LuckyRecord::Associations

  macro inherited
    FIELDS = [] of Nil

    field id : Int32, autogenerated: true
    field created_at : Time, autogenerated: true
    field updated_at : Time, autogenerated: true
  end

  def_equals @id

  def to_param
    id.to_s
  end

  macro table(table_name)
    {{yield}}
    setup {{table_name}}
  end

  def delete
    LuckyRecord::Repo.run do |db|
      db.exec "DELETE FROM #{@@table_name} WHERE id = #{id}"
    end
  end

  macro setup(table_name)
    {% table_name = table_name.id %}
    setup_initialize
    setup_db_mapping
    setup_getters
    setup_base_query_class({{table_name}})
    setup_base_form_class({{table_name}})
    setup_table_name({{table_name}})
  end

  macro setup_table_name(table_name)
    @@table_name = :{{table_name}}
  end

  macro setup_initialize
    def initialize(
        {% for field in FIELDS %}
          @{{field[:name]}} : {{field[:base_type]}}{% if field[:nilable] %}?{% end %},
        {% end %}
      )
    end
  end

  macro setup_db_mapping
    DB.mapping({
      {% for field in FIELDS %}
        {{field[:name]}}: {
          type: {{field[:base_type]}},
          nilable: {{field[:nilable]}},
        },
      {% end %}
    })
  end

  macro setup_base_query_class(table_name)
    LuckyRecord::BaseQueryTemplate.setup({{ @type }}, {{ FIELDS }}, {{ table_name }})
  end

  macro setup_base_form_class(table_name)
    LuckyRecord::BaseFormTemplate.setup({{ @type }}, {{ FIELDS }}, {{ table_name }})
  end

  macro setup_getters
    {% for field in FIELDS %}
      def {{field[:name]}}
        {{ field[:type] }}.deserialize @{{field[:name]}}
      end
    {% end %}
  end

  macro field(type_declaration, autogenerated = false)
    # If it is a nilable type
    {% if type_declaration.type.is_a?(Union) %}
      {% data_type = LuckyRecord::Type::CRYSTAL_TYPE_TO_LUCKY_RECORD_MAPPING["LuckyRecord::#{type_declaration.type.types.first}Type"] %}
      {% base_type = LuckyRecord::Type::CRYSTAL_TYPE_TO_BASE_TYPE_MAPPING["LuckyRecord::#{type_declaration.type.types.first}Type"] %}
      {% nilable = true %}
    {% else %}
      {% data_type = LuckyRecord::Type::CRYSTAL_TYPE_TO_LUCKY_RECORD_MAPPING["LuckyRecord::#{type_declaration.type}Type"] %}
      {% base_type = LuckyRecord::Type::CRYSTAL_TYPE_TO_BASE_TYPE_MAPPING["LuckyRecord::#{type_declaration.type}Type"] %}
      {% nilable = false %}
    {% end %}

    {% unless base_type %}
      {% raise "Could not find type for #{type_declaration.type}"}
    {% end %}

    {% FIELDS << {
      name: type_declaration.var,
      type: data_type,
      nilable: nilable.id,
      autogenerated: autogenerated,
      base_type: base_type
    } %}
  end
end
